#! /bin/bash
if [ -z ${dotfilesDir+x} ]; then
	source "$HOME/.dotfiles/installers/install.sh" essentials "$@"
fi

dotBackupDir="${dotfilesDir}/backup"
if [ ! -d $dotBackupDir ]; then
	echo -e $cErr"Backup config directory does not exist: "$cFile${dotBackupDir}$cNone
	echo -e "Run backup install, to configure: "$cFile${dotfilesDir}"/installers/backup/install.sh"$cNone
	exit 1
fi

# load config generated by install in backup dir.
backupConfigFile="${dotBackupDir}/config"
if [ ! -f $backupConfigFile ]; then 
	echo -e $cErr"Backup config file does not exist: "$cFile${backupConfigFile}$cNone
	exit 1
fi

source "$backupConfigFile"

if [ -z ${backupSourceDirectory+x} ]; then
	echo -e $cErr"Missing variable after config load:"$cNone" \$backupSourceDirectory"
	exit 2
fi
if [ -z ${backupDestRemote+x} ]; then
	echo -e $cErr"Missing variable after config load:"$cNone" \$backupDestRemote"
	exit 2
fi
if [ -z ${backupDestDirectory+x} ]; then
	echo -e $cErr"Missing variable after config load:"$cNone" \$backupDestDirectory"
	exit 2
fi

if [ ! -d "$backupSourceDirectory" ]; then
	echo -e $cErr"Source directory does not exist: "$cFile${backupSourceDirectory}$cNone
	exit 1
fi


ribs="${dotfilesDir}/installers/backup/rsync-incremental-backup/rsync-incremental-backup-local"
ribsParams="'$backupSourceDirectory' '$backupDestDirectory'"
if [ ! -z "$backupDestRemote" ]; then
	ribs="${dotfilesDir}/installers/backup/rsync-incremental-backup/rsync-incremental-backup-remote"
	ribsParams=$ribsParams" '$backupDestRemote'"
fi

if [ ! -f $ribs ]; then
	echo -e $cErr"External backup script file not found: "$cFile${ribs}$cNone
	exit 1
else
	if [ ! -x $ribs ]; then
		echo -e $cErr"External backup script file is not executable: "$cFile${ribs}$cNone
		exit 1
	fi
fi

backupExcludes=()
# load excludes from file
backupExcludesFile="${dotBackupDir}/exclude.txt"
if [ -f "${backupExcludesFile}" ]; then
	# load to array per line
	while read -r line; do
		# add to excludes array
		#echo -e "exclude: '$line'"
		backupExcludes+=("$line")
	done < $backupExcludesFile
else
	unset backupExcludeFile
fi
backupMountpointsNotExcluded=()
# check mountpoints in source and warn if there is a mount pint not in excludes
#TODO use function for mountpoints inside dir, unify with install.sh
while read -r i; do # loop though all mountpoints
	fields=($i)
	src=${fields[0]}
	dst=${fields[1]}

	case "$dst" in ${backupSourceDirectory}*) # if mount destination is inside our source directory
		# look if dir is in excludes
		found=0
		for exclude in "${backupExcludes[@]}"; do
			if [ "$dst" == "$exclude" ]; then
				found=1
				break
			fi
		done
		if [ $found = 0 ]; then
			# echo -e "Not excluded mountpoint: $cFile${dst}$cNone -> $cFile${src}$cNone"
			backupMountpointsNotExcluded+=("$dst")
		fi
	esac
done < /proc/mounts
unset fields src dst exclude found
unset backupExcludes

# exit with error if array not empty
if [ ${#backupMountpointsNotExcluded[@]} -gt 0 ]; then
	echo -e $cErr"Not excluded mount points:"$cNone
	.toLines $backupMountpointsNotExcluded
	exit 3
fi

if [ ! -z "$backupDestRemote" ]; then
	if ! .needCommand rsync scp ssh; then
		exit 4
	fi
fi

#TODO exclude file not working
export ownFolderName=".dotfiles/backup"
export interactiveMode="yes"
if ! .run "${ribs} ${ribsParams}"; then
	echo -e $cErr"Error executing $cFile${ribs}"$cNone
	exit 255
fi

exit 0
( cd $dotBackupDir ; pwd ; .run "${ribs} ${ribsParams}" )
#TODO backup more directories
